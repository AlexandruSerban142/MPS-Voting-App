{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/ContestClassicBracketRound.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/ContestClassicBracketRound.vue","mtime":1573408857475},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js","mtime":1573216109227}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from \"vuex\";\n\nexport default {\n  props: {\n    contestId: {\n      required: true,\n      type: String\n    },\n\n    stageId: {\n      required: true,\n      type: String\n    },\n\n    roundId: {\n      required: true,\n      type: String\n    }\n  },\n\n  computed: {\n    ...mapState({\n      round(state) {\n        return state.contests.items[this.contestId].stages[this.stageId][\n          this.roundId\n        ];\n      }\n    }),\n\n    isStarted() {\n      if (\n        this.firstPlayer.score == \"disqualified\" ||\n        this.secondPlayer.score == \"disqualified\"\n      )\n        return true;\n      return this.firstPlayer.score != 0 && this.secondPlayer.score != 0;\n    },\n\n    firstPlayerWon() {\n      if (this.round[this.firstPlayer.name] == null) return true;\n      if (this.round.stats.winner)\n        return this.round.stats.winner == this.firstPlayer.name ? true : false;\n      return false;\n    },\n\n    benchmarks() {\n      let benchmarksList = { ...this.round[this.firstPlayer.name] };\n      if (benchmarksList[Object.keys(benchmarksList)[0]] == null) return null;\n      delete benchmarksList.score;\n\n      return benchmarksList;\n    },\n\n    firstPlayer() {\n      let updatedRound = { ...this.round };\n      delete updatedRound.stats;\n\n      let players = Object.keys(updatedRound);\n\n      if (updatedRound[players[0]] == null)\n        return {\n          name: players[0],\n          score: null\n        };\n\n      return {\n        name: players[0],\n        score: this.round[players[0]].score\n      };\n    },\n\n    secondPlayer() {\n      let updatedRound = { ...this.round };\n      delete updatedRound.stats;\n\n      let players = Object.keys(updatedRound);\n\n      if (updatedRound[players[0]] == null)\n        return {\n          name: \"-\",\n          score: null\n        };\n\n      return {\n        name: players[1],\n        score: this.round[players[1]].score\n      };\n    }\n  },\n\n  methods: {\n    score(player) {\n      return player.score == null ||\n        player.score == 0 ||\n        player.score == \"disqualified\" ||\n        isNaN(player.score)\n        ? \"\"\n        : `${player.score}pct`;\n    },\n\n    isDisqualified(playerName) {\n      if (this.round[playerName] && this.round[playerName].score)\n        return this.round[playerName].score == \"disqualified\";\n\n      return false;\n    }\n  }\n};\n",{"version":3,"sources":["ContestClassicBracketRound.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ContestClassicBracketRound.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <label class=\"form-control-label\">{{ score(firstPlayer) }}</label>\n      <button\n        style=\"margin-left: .5rem\"\n        class=\"btn btn-primary\"\n        v-bind:class=\"[\n          isStarted\n            ? firstPlayerWon\n              ? 'win'\n              : isDisqualified(firstPlayer.name)\n              ? 'disqualified'\n              : 'lose'\n            : ''\n        ]\"\n      >\n        {{ firstPlayer.name }}\n      </button>\n      <label class=\"form-control-label\">vs</label>\n      <button\n        style=\"margin: 0 .5rem 0 .5rem; \"\n        class=\"btn btn-primary my-4\"\n        v-bind:class=\"[\n          isStarted\n            ? firstPlayerWon\n              ? isDisqualified(secondPlayer.name)\n                ? 'disqualified'\n                : 'lose'\n              : 'win'\n            : ''\n        ]\"\n      >\n        {{ secondPlayer.name == \"undefined\" ? \"-\" : secondPlayer.name }}\n      </button>\n      <label class=\"form-control-label\">{{ score(secondPlayer) }}</label>\n    </div>\n    <div>\n      <div v-for=\"(benchmark, key, index) in benchmarks\" :key=\"index\">\n        {{ `${key}: ${benchmark} - ${round[secondPlayer.name][key]}` }}\n      </div>\n      <br />\n      <br />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\n\nexport default {\n  props: {\n    contestId: {\n      required: true,\n      type: String\n    },\n\n    stageId: {\n      required: true,\n      type: String\n    },\n\n    roundId: {\n      required: true,\n      type: String\n    }\n  },\n\n  computed: {\n    ...mapState({\n      round(state) {\n        return state.contests.items[this.contestId].stages[this.stageId][\n          this.roundId\n        ];\n      }\n    }),\n\n    isStarted() {\n      if (\n        this.firstPlayer.score == \"disqualified\" ||\n        this.secondPlayer.score == \"disqualified\"\n      )\n        return true;\n      return this.firstPlayer.score != 0 && this.secondPlayer.score != 0;\n    },\n\n    firstPlayerWon() {\n      if (this.round[this.firstPlayer.name] == null) return true;\n      if (this.round.stats.winner)\n        return this.round.stats.winner == this.firstPlayer.name ? true : false;\n      return false;\n    },\n\n    benchmarks() {\n      let benchmarksList = { ...this.round[this.firstPlayer.name] };\n      if (benchmarksList[Object.keys(benchmarksList)[0]] == null) return null;\n      delete benchmarksList.score;\n\n      return benchmarksList;\n    },\n\n    firstPlayer() {\n      let updatedRound = { ...this.round };\n      delete updatedRound.stats;\n\n      let players = Object.keys(updatedRound);\n\n      if (updatedRound[players[0]] == null)\n        return {\n          name: players[0],\n          score: null\n        };\n\n      return {\n        name: players[0],\n        score: this.round[players[0]].score\n      };\n    },\n\n    secondPlayer() {\n      let updatedRound = { ...this.round };\n      delete updatedRound.stats;\n\n      let players = Object.keys(updatedRound);\n\n      if (updatedRound[players[0]] == null)\n        return {\n          name: \"-\",\n          score: null\n        };\n\n      return {\n        name: players[1],\n        score: this.round[players[1]].score\n      };\n    }\n  },\n\n  methods: {\n    score(player) {\n      return player.score == null ||\n        player.score == 0 ||\n        player.score == \"disqualified\" ||\n        isNaN(player.score)\n        ? \"\"\n        : `${player.score}pct`;\n    },\n\n    isDisqualified(playerName) {\n      if (this.round[playerName] && this.round[playerName].score)\n        return this.round[playerName].score == \"disqualified\";\n\n      return false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.win {\n  background-color: green !important;\n}\n\n.lose {\n  background-color: red !important;\n}\n\n.disqualified {\n  background-color: gray !important;\n}\n</style>\n"]}]}