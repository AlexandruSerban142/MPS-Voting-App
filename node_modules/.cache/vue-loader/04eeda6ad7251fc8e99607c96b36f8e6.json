{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/RemovePlayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/RemovePlayer.vue","mtime":1573410470418},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js","mtime":1573216109227}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapState, mapActions, mapMutations } from \"vuex\";\n\nexport default {\n  props: {\n    contestId: {\n      required: true,\n      type: String\n    },\n\n    stageId: {\n      required: true,\n      type: Number\n    }\n  },\n\n  computed: {\n    ...mapState({\n      contest(state) {\n        return state.contests.items[this.contestId];\n      }\n    }),\n\n    rounds() {\n      return this.contest.stages[this.stageId];\n    }\n  },\n\n  methods: {\n    ...mapActions(\"contests\", [\"disqualifyPlayer\"]),\n\n    updatedRound(round) {\n      let newRound = { ...round };\n      for (let [key, value] of Object.entries(newRound)) {\n        if (key == \"stats\") delete newRound[key];\n        if (value == null) return null;\n      }\n\n      const keys = Object.keys(newRound);\n      if (\n        newRound[keys[0]].score == \"disqualified\" ||\n        newRound[keys[1]].score == \"disqualified\"\n      )\n        return null;\n      return newRound;\n    },\n\n    removePlayer(playerName, roundId, round) {\n      let opponentName = null;\n      for (let [key, value] of Object.entries(this.updatedRound(round))) {\n        if (key != playerName) opponentName = key;\n      }\n\n      this.disqualifyPlayer({\n        playerName,\n        opponentName,\n        roundId,\n        stageId: this.stageId,\n        contestId: this.contestId\n      });\n    }\n  }\n};\n",{"version":3,"sources":["RemovePlayer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RemovePlayer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"row justify-content-center\">\n      <div class=\"col-lg-12\">\n        <div class=\"card bg-secondary shadow border-0\">\n          <div class=\"card-body py-lg-5\">\n            <label class=\"form-control-label\">Disqualify Players from current Stage:</label>\n            <ul v-for=\"(round, roundKey, roundIndex) in rounds\" :key=\"roundIndex\">\n              <li\n                style=\"text-align:left\"\n                v-for=\"(player, playerKey, playerIndex) in updatedRound(round)\"\n                :key=\"playerIndex\"\n              >\n                {{ playerKey }}\n                <span class=\"btn-inner--icon\">\n                  <img\n                    @click.prevent=\"removePlayer(playerKey, roundKey, round)\"\n                    width=\"12px\"\n                    src=\"../assets/cancel-icon.png\"\n                  />\n                </span>\n              </li>\n            </ul>\n            <br />\n            <div>\n              <label class=\"form-control-label\">Contest QR Code:</label>\n              <qrcode\n                value=\"`//localhost:8080/contest/${contestID}?judge=true`\"\n                :options=\"{ width: 200 }\"\n              ></qrcode>\n              <button disabled>Print QR Code</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapState, mapActions, mapMutations } from \"vuex\";\n\nexport default {\n  props: {\n    contestId: {\n      required: true,\n      type: String\n    },\n\n    stageId: {\n      required: true,\n      type: Number\n    }\n  },\n\n  computed: {\n    ...mapState({\n      contest(state) {\n        return state.contests.items[this.contestId];\n      }\n    }),\n\n    rounds() {\n      return this.contest.stages[this.stageId];\n    }\n  },\n\n  methods: {\n    ...mapActions(\"contests\", [\"disqualifyPlayer\"]),\n\n    updatedRound(round) {\n      let newRound = { ...round };\n      for (let [key, value] of Object.entries(newRound)) {\n        if (key == \"stats\") delete newRound[key];\n        if (value == null) return null;\n      }\n\n      const keys = Object.keys(newRound);\n      if (\n        newRound[keys[0]].score == \"disqualified\" ||\n        newRound[keys[1]].score == \"disqualified\"\n      )\n        return null;\n      return newRound;\n    },\n\n    removePlayer(playerName, roundId, round) {\n      let opponentName = null;\n      for (let [key, value] of Object.entries(this.updatedRound(round))) {\n        if (key != playerName) opponentName = key;\n      }\n\n      this.disqualifyPlayer({\n        playerName,\n        opponentName,\n        roundId,\n        stageId: this.stageId,\n        contestId: this.contestId\n      });\n    }\n  }\n};\n</script>\n\n<style scoped></style>\n"]}]}