{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/modules/auth.js","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/modules/auth.js","mtime":1573408857482},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js","mtime":1572617093804},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1573384218024}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db } from \"@/main\";\nimport firebase from \"firebase\";\nexport default {\n  namespaced: true,\n  state: {\n    authId: null,\n    unsubscribeAuthObserver: null\n  },\n  getters: {\n    authUser: function authUser(state, getters, rootState) {\n      return state.authId ? rootState.users.items[state.authId] : null;\n    }\n  },\n  actions: {\n    registerUserWithEmailAndPassword: function registerUserWithEmailAndPassword(_ref, _ref2) {\n      var dispatch = _ref.dispatch;\n      var email = _ref2.email,\n          name = _ref2.name,\n          password = _ref2.password,\n          role = _ref2.role;\n      return firebase.auth().createUserWithEmailAndPassword(email, password).then(function (ref) {\n        console.log(\"User uid: \", ref.user.uid);\n        return dispatch(\"users/createUser\", {\n          id: ref.user.uid,\n          email: email,\n          name: name,\n          role: role\n        }, {\n          root: true\n        });\n      }, {\n        root: true\n      }).then(function () {\n        return dispatch(\"fetchAuthUser\");\n      });\n    },\n    signInWithEmailAndPassword: function signInWithEmailAndPassword(context, _ref3) {\n      var email = _ref3.email,\n          password = _ref3.password;\n      return firebase.auth().signInWithEmailAndPassword(email, password);\n    },\n    signInWithGoogle: function signInWithGoogle(_ref4, role) {\n      var dispatch = _ref4.dispatch;\n      var provider = new firebase.auth.GoogleAuthProvider();\n      return firebase.auth().signInWithPopup(provider).then(function (data) {\n        var user = _objectSpread({}, data.user, {\n          role: role\n        });\n\n        db.collection(\"users\").doc(user.uid).get().then(function (docSnapshot) {\n          if (!docSnapshot.exists) {\n            return dispatch(\"users/createUser\", {\n              id: user.uid,\n              name: user.displayName,\n              email: user.email,\n              username: user.email,\n              role: user.role,\n              avatar: user.photoURL\n            }, {\n              root: true\n            }).then(function () {\n              return dispatch(\"fetchAuthUser\");\n            });\n          }\n        });\n      });\n    },\n    signOut: function signOut(_ref5) {\n      var commit = _ref5.commit;\n      return firebase.auth().signOut().then(function () {\n        commit(\"setAuthId\", null);\n      });\n    },\n    initAuthentification: function initAuthentification(_ref6) {\n      var dispatch = _ref6.dispatch,\n          commit = _ref6.commit,\n          state = _ref6.state;\n      return new Promise(function (resolve, reject) {\n        if (state.unsubscribeAuthObserver) {\n          state.unsubscribeAuthObserver();\n        }\n\n        var unsubscribe = firebase.auth().onAuthStateChanged(function (user) {\n          console.log(\"ðŸ‘£ the user has changed\");\n\n          if (user) {\n            dispatch(\"fetchAuthUser\").then(function (dbUser) {\n              return resolve(dbUser);\n            });\n          } else {\n            resolve(null);\n          }\n        });\n        commit(\"setUnsubscribeAuthObserver\", unsubscribe);\n      });\n    },\n    fetchAuthUser: function fetchAuthUser(_ref7) {\n      var dispatch = _ref7.dispatch,\n          commit = _ref7.commit;\n      var userId = firebase.auth().currentUser.uid;\n      return new Promise(function (resolve, reject) {\n        db.collection(\"users\").doc(userId).get().then(function (docSnapshot) {\n          if (docSnapshot.exists) {\n            return dispatch(\"users/fetchUser\", {\n              id: userId\n            }, {\n              root: true\n            }).then(function (user) {\n              commit(\"setAuthId\", userId);\n              resolve(user);\n            });\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n  },\n  mutations: {\n    setAuthId: function setAuthId(state, id) {\n      state.authId = id;\n    },\n    setUnsubscribeAuthObserver: function setUnsubscribeAuthObserver(state, unsubscribe) {\n      state.unsubscribeAuthObserver = unsubscribe;\n    }\n  }\n};",{"version":3,"sources":["/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/modules/auth.js"],"names":["db","firebase","namespaced","state","authId","unsubscribeAuthObserver","getters","authUser","rootState","users","items","actions","registerUserWithEmailAndPassword","dispatch","email","name","password","role","auth","createUserWithEmailAndPassword","then","ref","console","log","user","uid","id","root","signInWithEmailAndPassword","context","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","data","collection","doc","get","docSnapshot","exists","displayName","username","avatar","photoURL","signOut","commit","initAuthentification","Promise","resolve","reject","unsubscribe","onAuthStateChanged","dbUser","fetchAuthUser","userId","currentUser","mutations","setAuthId","setUnsubscribeAuthObserver"],"mappings":"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","sourcesContent":["import { db } from \"@/main\";\nimport firebase from \"firebase\";\n\nexport default {\n  namespaced: true,\n\n  state: {\n    authId: null,\n    unsubscribeAuthObserver: null\n  },\n  getters: {\n    authUser(state, getters, rootState) {\n      return state.authId ? rootState.users.items[state.authId] : null;\n    }\n  },\n  actions: {\n    registerUserWithEmailAndPassword(\n      { dispatch },\n      { email, name, password, role }\n    ) {\n      return firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then(\n          ref => {\n            console.log(\"User uid: \", ref.user.uid);\n            return dispatch(\n              \"users/createUser\",\n              {\n                id: ref.user.uid,\n                email,\n                name,\n                role\n              },\n              { root: true }\n            );\n          },\n          { root: true }\n        )\n        .then(() => dispatch(\"fetchAuthUser\"));\n    },\n\n    signInWithEmailAndPassword(context, { email, password }) {\n      return firebase.auth().signInWithEmailAndPassword(email, password);\n    },\n\n    signInWithGoogle({ dispatch }, role) {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      return firebase\n        .auth()\n        .signInWithPopup(provider)\n        .then(data => {\n          const user = { ...data.user, role };\n          db.collection(\"users\")\n            .doc(user.uid)\n            .get()\n            .then(docSnapshot => {\n              if (!docSnapshot.exists) {\n                return dispatch(\n                  \"users/createUser\",\n                  {\n                    id: user.uid,\n                    name: user.displayName,\n                    email: user.email,\n                    username: user.email,\n                    role: user.role,\n                    avatar: user.photoURL\n                  },\n                  { root: true }\n                ).then(() => dispatch(\"fetchAuthUser\"));\n              }\n            });\n        });\n    },\n\n    signOut({ commit }) {\n      return firebase\n        .auth()\n        .signOut()\n        .then(() => {\n          commit(\"setAuthId\", null);\n        });\n    },\n\n    initAuthentification({ dispatch, commit, state }) {\n      return new Promise((resolve, reject) => {\n        if (state.unsubscribeAuthObserver) {\n          state.unsubscribeAuthObserver();\n        }\n\n        const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n          console.log(\"ðŸ‘£ the user has changed\");\n          if (user) {\n            dispatch(\"fetchAuthUser\").then(dbUser => resolve(dbUser));\n          } else {\n            resolve(null);\n          }\n        });\n\n        commit(\"setUnsubscribeAuthObserver\", unsubscribe);\n      });\n    },\n\n    fetchAuthUser({ dispatch, commit }) {\n      const userId = firebase.auth().currentUser.uid;\n\n      return new Promise((resolve, reject) => {\n        db.collection(\"users\")\n          .doc(userId)\n          .get()\n          .then(docSnapshot => {\n            if (docSnapshot.exists) {\n              return dispatch(\n                \"users/fetchUser\",\n                { id: userId },\n                { root: true }\n              ).then(user => {\n                commit(\"setAuthId\", userId);\n                resolve(user);\n              });\n            } else {\n              resolve(null);\n            }\n          });\n      });\n    }\n  },\n  mutations: {\n    setAuthId(state, id) {\n      state.authId = id;\n    },\n\n    setUnsubscribeAuthObserver(state, unsubscribe) {\n      state.unsubscribeAuthObserver = unsubscribe;\n    }\n  }\n};\n"]}]}