{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/index.js","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/index.js","mtime":1573408857482},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js","mtime":1572617093804},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1573384218024}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport auth from \"./modules/auth\";\nimport users from \"./modules/users\";\nimport contests from \"./modules/contests\";\nimport { db } from \"@/main\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {},\n  getters: {},\n  actions: {\n    // functie generica pentru extragerea unei resurse din db\n    // ex: resource -> users si id-ul unui user\n    fetchItem: function fetchItem(_ref, _ref2) {\n      var state = _ref.state,\n          commit = _ref.commit;\n      var id = _ref2.id,\n          resource = _ref2.resource;\n      console.log(\"Fetching \".concat(resource, \": \").concat(id));\n      return new Promise(function (resolve, reject) {\n        db.collection(resource).doc(id).get().then(function (doc) {\n          if (doc.exists) {\n            console.log(\"The document is loaded!\");\n            commit(\"setItem\", {\n              resource: resource,\n              id: id,\n              item: doc.data()\n            });\n            resolve(state[resource].items[id]);\n          } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n          }\n        }).catch(function (error) {\n          console.log(\"Error getting document:\", error);\n        });\n      });\n    },\n    fetchItems: function fetchItems(_ref3, _ref4) {\n      var dispatch = _ref3.dispatch;\n      var ids = _ref4.ids,\n          resource = _ref4.resource;\n\n      if (ids) {\n        ids = Object.keys(ids);\n        return Promise.all(ids.map(function (id) {\n          return dispatch(\"fetchItem\", {\n            id: id,\n            resource: resource\n          });\n        }));\n      }\n\n      return;\n    }\n  },\n  // functie generica pentru a face update local in Store\n  // ex: atunci cand sunt extrase toate contesturile din db, pentru fiecare este apelata functia asta cu\n  // item -> obiectul contest\n  // id -> id-ul obiectului\n  // resource -> 'contests'\n  mutations: {\n    setItem: function setItem(state, _ref5) {\n      var item = _ref5.item,\n          id = _ref5.id,\n          resource = _ref5.resource;\n      Vue.set(state[resource].items, id, item);\n    }\n  },\n  modules: {\n    auth: auth,\n    users: users,\n    contests: contests\n  }\n});",{"version":3,"sources":["/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/index.js"],"names":["Vue","Vuex","auth","users","contests","db","use","Store","state","getters","actions","fetchItem","commit","id","resource","console","log","Promise","resolve","reject","collection","doc","get","then","exists","item","data","items","catch","error","fetchItems","dispatch","ids","Object","keys","all","map","mutations","setItem","set","modules"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,OAAOC,QAAP;AACA,SAASC,EAAT,QAAmB,QAAnB;AAEAL,GAAG,CAACM,GAAJ,CAAQL,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACM,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE,EADqB;AAG5BC,EAAAA,OAAO,EAAE,EAHmB;AAK5BC,EAAAA,OAAO,EAAE;AACP;AACA;AACAC,IAAAA,SAHO,kCAGwC;AAAA,UAAnCH,KAAmC,QAAnCA,KAAmC;AAAA,UAA5BI,MAA4B,QAA5BA,MAA4B;AAAA,UAAhBC,EAAgB,SAAhBA,EAAgB;AAAA,UAAZC,QAAY,SAAZA,QAAY;AAC7CC,MAAAA,OAAO,CAACC,GAAR,oBAAwBF,QAAxB,eAAqCD,EAArC;AAEA,aAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCd,QAAAA,EAAE,CAACe,UAAH,CAAcN,QAAd,EACGO,GADH,CACOR,EADP,EAEGS,GAFH,GAGGC,IAHH,CAGQ,UAAAF,GAAG,EAAI;AACX,cAAIA,GAAG,CAACG,MAAR,EAAgB;AACdT,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAJ,YAAAA,MAAM,CAAC,SAAD,EAAY;AAAEE,cAAAA,QAAQ,EAARA,QAAF;AAAYD,cAAAA,EAAE,EAAFA,EAAZ;AAAgBY,cAAAA,IAAI,EAAEJ,GAAG,CAACK,IAAJ;AAAtB,aAAZ,CAAN;AACAR,YAAAA,OAAO,CAACV,KAAK,CAACM,QAAD,CAAL,CAAgBa,KAAhB,CAAsBd,EAAtB,CAAD,CAAP;AACD,WAJD,MAIO;AACL;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF,SAZH,EAaGY,KAbH,CAaS,UAASC,KAAT,EAAgB;AACrBd,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCa,KAAvC;AACD,SAfH;AAgBD,OAjBM,CAAP;AAkBD,KAxBM;AA0BPC,IAAAA,UA1BO,oCA0BqC;AAAA,UAA/BC,QAA+B,SAA/BA,QAA+B;AAAA,UAAjBC,GAAiB,SAAjBA,GAAiB;AAAA,UAAZlB,QAAY,SAAZA,QAAY;;AAC1C,UAAIkB,GAAJ,EAAS;AACPA,QAAAA,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAN;AACA,eAAOf,OAAO,CAACkB,GAAR,CACLH,GAAG,CAACI,GAAJ,CAAQ,UAAAvB,EAAE;AAAA,iBAAIkB,QAAQ,CAAC,WAAD,EAAc;AAAElB,YAAAA,EAAE,EAAFA,EAAF;AAAMC,YAAAA,QAAQ,EAARA;AAAN,WAAd,CAAZ;AAAA,SAAV,CADK,CAAP;AAGD;;AACD;AACD;AAlCM,GALmB;AA0C5B;AACA;AACA;AACA;AACA;AACAuB,EAAAA,SAAS,EAAE;AACTC,IAAAA,OADS,mBACD9B,KADC,SAC8B;AAAA,UAAtBiB,IAAsB,SAAtBA,IAAsB;AAAA,UAAhBZ,EAAgB,SAAhBA,EAAgB;AAAA,UAAZC,QAAY,SAAZA,QAAY;AACrCd,MAAAA,GAAG,CAACuC,GAAJ,CAAQ/B,KAAK,CAACM,QAAD,CAAL,CAAgBa,KAAxB,EAA+Bd,EAA/B,EAAmCY,IAAnC;AACD;AAHQ,GA/CiB;AAqD5Be,EAAAA,OAAO,EAAE;AACPtC,IAAAA,IAAI,EAAJA,IADO;AAEPC,IAAAA,KAAK,EAALA,KAFO;AAGPC,IAAAA,QAAQ,EAARA;AAHO;AArDmB,CAAf,CAAf","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport auth from \"./modules/auth\";\nimport users from \"./modules/users\";\nimport contests from \"./modules/contests\";\nimport { db } from \"@/main\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {},\n\n  getters: {},\n\n  actions: {\n    // functie generica pentru extragerea unei resurse din db\n    // ex: resource -> users si id-ul unui user\n    fetchItem({ state, commit }, { id, resource }) {\n      console.log(`Fetching ${resource}: ${id}`);\n\n      return new Promise((resolve, reject) => {\n        db.collection(resource)\n          .doc(id)\n          .get()\n          .then(doc => {\n            if (doc.exists) {\n              console.log(\"The document is loaded!\");\n              commit(\"setItem\", { resource, id, item: doc.data() });\n              resolve(state[resource].items[id]);\n            } else {\n              // doc.data() will be undefined in this case\n              console.log(\"No such document!\");\n            }\n          })\n          .catch(function(error) {\n            console.log(\"Error getting document:\", error);\n          });\n      });\n    },\n\n    fetchItems({ dispatch }, { ids, resource }) {\n      if (ids) {\n        ids = Object.keys(ids);\n        return Promise.all(\n          ids.map(id => dispatch(\"fetchItem\", { id, resource }))\n        );\n      }\n      return;\n    }\n  },\n\n  // functie generica pentru a face update local in Store\n  // ex: atunci cand sunt extrase toate contesturile din db, pentru fiecare este apelata functia asta cu\n  // item -> obiectul contest\n  // id -> id-ul obiectului\n  // resource -> 'contests'\n  mutations: {\n    setItem(state, { item, id, resource }) {\n      Vue.set(state[resource].items, id, item);\n    }\n  },\n\n  modules: {\n    auth,\n    users,\n    contests\n  }\n});\n"]}]}