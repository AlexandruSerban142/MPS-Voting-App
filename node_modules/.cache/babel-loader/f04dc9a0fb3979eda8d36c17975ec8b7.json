{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/modules/contests.js","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/modules/contests.js","mtime":1573408857482},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js","mtime":1572617093804},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1573384218024}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _slicedToArray from \"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { db, firestore } from \"@/main\";\nimport { newStageFactory, InitialStageFactory, getUpdatedPlayerBenchmarkScore } from \"@/helpers\";\nexport default {\n  namespaced: true,\n  state: {\n    items: {}\n  },\n  getters: {},\n  actions: {\n    fetchAllContests: function fetchAllContests(_ref) {\n      var commit = _ref.commit;\n      console.log(\"Fetching Contests: ALL\");\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var contests;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return db.collection(\"contests\").get();\n\n                case 2:\n                  contests = _context.sent;\n                  contests.docs.forEach(function (contest) {\n                    commit(\"setItem\", {\n                      resource: \"contests\",\n                      id: contest.id,\n                      item: contest.data()\n                    }, {\n                      root: true\n                    });\n                  });\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    fetchContest: function fetchContest(_ref3, contestId) {\n      var commit = _ref3.commit;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var contest;\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return db.collection(\"contests\").doc(contestId).get();\n\n                case 2:\n                  contest = _context2.sent;\n                  commit(\"setItem\", {\n                    resource: \"contests\",\n                    id: contestId,\n                    item: contest.data()\n                  }, {\n                    root: true\n                  });\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x3, _x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    },\n    createContest: function createContest(_ref5, _ref6) {\n      var commit = _ref5.commit,\n          state = _ref5.state,\n          rootState = _ref5.rootState;\n      var contest = _ref6.contest,\n          players = _ref6.players;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref7 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var contestRef;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  contest = _objectSpread({}, contest, {\n                    userId: rootState.users.items[rootState.auth.authId].email,\n                    status: \"notStarted\",\n                    currentStage: 0,\n                    stages: _defineProperty({}, \"0\", InitialStageFactory(players, contest.benchmarks))\n                  });\n                  _context3.next = 3;\n                  return db.collection(\"contests\").add(contest);\n\n                case 3:\n                  contestRef = _context3.sent;\n                  commit(\"setItem\", {\n                    resource: \"contests\",\n                    id: contestRef.id,\n                    item: contest\n                  }, {\n                    root: true\n                  });\n                  resolve(state.items[contestRef.id]);\n\n                case 6:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    },\n    sendRoundRating: function () {\n      var _sendRoundRating = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(_ref8, _ref9) {\n        var state, dispatch, rootState, contestId, stageId, roundId, players, round, updates, benchmarks, nrRatings, roundPath;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                state = _ref8.state, dispatch = _ref8.dispatch, rootState = _ref8.rootState;\n                contestId = _ref9.contestId, stageId = _ref9.stageId, roundId = _ref9.roundId, players = _ref9.players;\n                _context4.next = 4;\n                return dispatch(\"fetchContest\", contestId);\n\n              case 4:\n                round = state.items[contestId].stages[stageId][roundId], updates = {};\n                benchmarks = state.items[contestId].benchmarks, nrRatings = round.stats.nrRatings, roundPath = \"stages.\".concat(stageId, \".\").concat(roundId);\n                benchmarks.forEach(function (benchmark) {\n                  players.forEach(function (player) {\n                    updates[\"\".concat(roundPath, \".\").concat(player.name, \".\").concat(benchmark)] = getUpdatedPlayerBenchmarkScore({\n                      average: round[player.name][benchmark],\n                      nrRatings: nrRatings,\n                      newRating: parseInt(player.benchmarks[benchmark], 10)\n                    });\n                  });\n                });\n                updates[\"\".concat(roundPath, \".stats.nrRatings\")] = nrRatings + 1;\n                updates[\"\".concat(roundPath, \".stats.users\")] = firestore.FieldValue.arrayUnion(rootState.auth.authId);\n                _context4.next = 11;\n                return db.collection(\"contests\").doc(contestId).update(updates);\n\n              case 11:\n                _context4.next = 13;\n                return dispatch(\"fetchContest\", contestId);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function sendRoundRating(_x7, _x8) {\n        return _sendRoundRating.apply(this, arguments);\n      }\n\n      return sendRoundRating;\n    }(),\n    endStage: function () {\n      var _endStage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(_ref10, _ref11) {\n        var state, commit, contestId, stageId, stage, benchmarks, updates, newPlayers, score, keys, winner, firstBenchmark, secondBenchMark, _i, _Object$entries, _Object$entries$_i, roundKey, round, _i2, _Object$entries2, _Object$entries2$_i, playerKey, player, _i4, _Object$entries4, _Object$entries4$_i, key, _benchmark, _i3, _Object$entries3, _Object$entries3$_i, i, benchmark, _objectSpread2, _stage, newStageId;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                state = _ref10.state, commit = _ref10.commit;\n                contestId = _ref11.contestId, stageId = _ref11.stageId;\n                stage = state.items[contestId].stages[stageId], benchmarks = state.items[contestId].benchmarks;\n                updates = {}, newPlayers = [], score = null, keys = null, winner = null;\n                _i = 0, _Object$entries = Object.entries(stage);\n\n              case 5:\n                if (!(_i < _Object$entries.length)) {\n                  _context5.next = 57;\n                  break;\n                }\n\n                _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), roundKey = _Object$entries$_i[0], round = _Object$entries$_i[1];\n\n                if (round.stats) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                newPlayers.push(Object.keys(round)[0]);\n                return _context5.abrupt(\"continue\", 54);\n\n              case 10:\n                if (!round.stats.winner) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                newPlayers.push(round.stats.winner);\n                return _context5.abrupt(\"continue\", 54);\n\n              case 13:\n                score = {}; // Calcul scor pentru cei doi jucatori din runda\n\n                _i2 = 0, _Object$entries2 = Object.entries(round);\n\n              case 15:\n                if (!(_i2 < _Object$entries2.length)) {\n                  _context5.next = 33;\n                  break;\n                }\n\n                _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2), playerKey = _Object$entries2$_i[0], player = _Object$entries2$_i[1];\n\n                if (!(playerKey == \"stats\")) {\n                  _context5.next = 19;\n                  break;\n                }\n\n                return _context5.abrupt(\"continue\", 30);\n\n              case 19:\n                score[playerKey] = 0;\n                _i4 = 0, _Object$entries4 = Object.entries(player);\n\n              case 21:\n                if (!(_i4 < _Object$entries4.length)) {\n                  _context5.next = 29;\n                  break;\n                }\n\n                _Object$entries4$_i = _slicedToArray(_Object$entries4[_i4], 2), key = _Object$entries4$_i[0], _benchmark = _Object$entries4$_i[1];\n\n                if (!(key == \"score\")) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                return _context5.abrupt(\"continue\", 26);\n\n              case 25:\n                score[playerKey] += _benchmark;\n\n              case 26:\n                _i4++;\n                _context5.next = 21;\n                break;\n\n              case 29:\n                updates[\"stages.\".concat(stageId, \".\").concat(roundKey, \".\").concat(playerKey, \".score\")] = score[playerKey];\n\n              case 30:\n                _i2++;\n                _context5.next = 15;\n                break;\n\n              case 33:\n                keys = Object.keys(score);\n                console.log(keys[0], score[keys[0]]);\n                console.log(keys[1], score[keys[1]]); // Departajare prin scor\n\n                winner = score[keys[0]] > score[keys[1]] ? keys[0] : score[keys[0]] < score[keys[1]] ? keys[1] : null;\n                console.log(\"winnner\", winner); // Departajare prin benchmarks\n\n                if (winner) {\n                  _context5.next = 50;\n                  break;\n                }\n\n                _i3 = 0, _Object$entries3 = Object.entries(benchmarks);\n\n              case 40:\n                if (!(_i3 < _Object$entries3.length)) {\n                  _context5.next = 50;\n                  break;\n                }\n\n                _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2), i = _Object$entries3$_i[0], benchmark = _Object$entries3$_i[1];\n                firstBenchmark = round[keys[0]][benchmark];\n                secondBenchMark = round[keys[1]][benchmark];\n                winner = firstBenchmark > secondBenchMark ? keys[0] : firstBenchmark < secondBenchMark ? keys[1] : null;\n\n                if (!winner) {\n                  _context5.next = 47;\n                  break;\n                }\n\n                return _context5.abrupt(\"break\", 50);\n\n              case 47:\n                _i3++;\n                _context5.next = 40;\n                break;\n\n              case 50:\n                // Departajare finala prin nume sau castiga primul jucator\n                if (!winner) if (keys[0].charAt(0) > keys[1].charAt(0)) {\n                  winner = keys[1];\n                } else {\n                  winner = keys[0];\n                }\n                console.log(\"winnner\", winner);\n                updates[\"stages.\".concat(stageId, \".\").concat(roundKey, \".stats.winner\")] = winner;\n                newPlayers.push(winner);\n\n              case 54:\n                _i++;\n                _context5.next = 5;\n                break;\n\n              case 57:\n                //Termina contestul daca a fost o singura runda in ultimul stage\n                if (Object.keys(stage).length == 1) {\n                  commit(\"endContest\", contestId);\n                  updates[\"status\"] = \"finished\";\n                } else {\n                  _stage = newStageFactory(newPlayers, benchmarks);\n                  newStageId = state.items[contestId].currentStage + 1;\n                  state.items[contestId].stages[\"\".concat(newStageId)] = _stage;\n                  updates = _objectSpread({}, updates, (_objectSpread2 = {}, _defineProperty(_objectSpread2, \"stages.\".concat(newStageId), _stage), _defineProperty(_objectSpread2, \"currentStage\", newStageId), _defineProperty(_objectSpread2, \"status\", \"paused\"), _objectSpread2));\n                }\n\n                _context5.next = 60;\n                return db.collection(\"contests\").doc(contestId).update(updates);\n\n              case 60:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function endStage(_x9, _x10) {\n        return _endStage.apply(this, arguments);\n      }\n\n      return endStage;\n    }(),\n    disqualifyPlayer: function disqualifyPlayer(_ref12, _ref13) {\n      var commit = _ref12.commit,\n          state = _ref12.state;\n      var playerName = _ref13.playerName,\n          opponentName = _ref13.opponentName,\n          contestId = _ref13.contestId,\n          stageId = _ref13.stageId,\n          roundId = _ref13.roundId;\n      var updates = {},\n          roundPath = \"stages.\".concat(stageId, \".\").concat(roundId); // Daca in stage-ul curent, aceasta runda era singura\n\n      if (Object.keys(state.items[contestId].stages[stageId]).length == 1) updates[\"status\"] = \"finished\";\n      updates[\"\".concat(roundPath, \".\").concat(playerName, \".score\")] = \"disqualified\";\n      updates[\"\".concat(roundPath, \".stats.winner\")] = opponentName;\n      db.collection(\"contests\").doc(contestId).update(updates);\n      commit(\"disqualify\", {\n        playerName: playerName,\n        opponentName: opponentName,\n        roundId: roundId,\n        stageId: stageId,\n        contestId: contestId\n      });\n    },\n    fetchContestRealTime: function fetchContestRealTime(_ref14, contestId) {\n      var state = _ref14.state,\n          commit = _ref14.commit;\n      db.collection(\"contests\").where(\"name\", \"==\", state.items[contestId].name).onSnapshot(function (snapshot) {\n        snapshot.docChanges().forEach(function (change) {\n          commit(\"setItem\", {\n            resource: \"contests\",\n            id: contestId,\n            item: change.doc.data()\n          }, {\n            root: true\n          });\n        });\n      });\n    }\n  },\n  mutations: {\n    endContest: function endContest(state, contestId) {\n      state.items[contestId].status = \"finished\";\n    },\n    disqualify: function disqualify(state, _ref15) {\n      var playerName = _ref15.playerName,\n          opponentName = _ref15.opponentName,\n          contestId = _ref15.contestId,\n          stageId = _ref15.stageId,\n          roundId = _ref15.roundId;\n      state.items[contestId].stages[stageId][roundId][playerName].score = \"disqualified\";\n      state.items[contestId].stages[stageId][roundId].stats.winner = opponentName;\n    }\n  }\n};",{"version":3,"sources":["/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/store/modules/contests.js"],"names":["db","firestore","newStageFactory","InitialStageFactory","getUpdatedPlayerBenchmarkScore","namespaced","state","items","getters","actions","fetchAllContests","commit","console","log","Promise","resolve","reject","collection","get","contests","docs","forEach","contest","resource","id","item","data","root","fetchContest","contestId","doc","createContest","rootState","players","userId","users","auth","authId","email","status","currentStage","stages","benchmarks","add","contestRef","sendRoundRating","dispatch","stageId","roundId","round","updates","nrRatings","stats","roundPath","benchmark","player","name","average","newRating","parseInt","FieldValue","arrayUnion","update","endStage","stage","newPlayers","score","keys","winner","Object","entries","roundKey","push","playerKey","key","i","firstBenchmark","secondBenchMark","charAt","length","newStageId","disqualifyPlayer","playerName","opponentName","fetchContestRealTime","where","onSnapshot","snapshot","docChanges","change","mutations","endContest","disqualify"],"mappings":"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","sourcesContent":["import { db, firestore } from \"@/main\";\nimport {\n  newStageFactory,\n  InitialStageFactory,\n  getUpdatedPlayerBenchmarkScore\n} from \"@/helpers\";\n\nexport default {\n  namespaced: true,\n\n  state: {\n    items: {}\n  },\n\n  getters: {},\n\n  actions: {\n    fetchAllContests({ commit }) {\n      console.log(`Fetching Contests: ALL`);\n\n      return new Promise(async (resolve, reject) => {\n        const contests = await db.collection(\"contests\").get();\n        contests.docs.forEach(contest => {\n          commit(\n            \"setItem\",\n            {\n              resource: \"contests\",\n              id: contest.id,\n              item: contest.data()\n            },\n            { root: true }\n          );\n        });\n        resolve();\n      });\n    },\n\n    fetchContest({ commit }, contestId) {\n      return new Promise(async (resolve, reject) => {\n        const contest = await db\n          .collection(\"contests\")\n          .doc(contestId)\n          .get();\n\n        commit(\n          \"setItem\",\n          {\n            resource: \"contests\",\n            id: contestId,\n            item: contest.data()\n          },\n          { root: true }\n        );\n        resolve();\n      });\n    },\n\n    createContest({ commit, state, rootState }, { contest, players }) {\n      return new Promise(async (resolve, reject) => {\n        contest = {\n          ...contest,\n          userId: rootState.users.items[rootState.auth.authId].email,\n          status: \"notStarted\",\n          currentStage: 0,\n          stages: {\n            [\"0\"]: InitialStageFactory(players, contest.benchmarks)\n          }\n        };\n\n        const contestRef = await db.collection(\"contests\").add(contest);\n\n        commit(\n          \"setItem\",\n          {\n            resource: \"contests\",\n            id: contestRef.id,\n            item: contest\n          },\n          { root: true }\n        );\n        resolve(state.items[contestRef.id]);\n      });\n    },\n\n    async sendRoundRating(\n      { state, dispatch, rootState },\n      { contestId, stageId, roundId, players }\n    ) {\n      await dispatch(\"fetchContest\", contestId);\n\n      let round = state.items[contestId].stages[stageId][roundId],\n        updates = {};\n\n      const benchmarks = state.items[contestId].benchmarks,\n        nrRatings = round.stats.nrRatings,\n        roundPath = `stages.${stageId}.${roundId}`;\n\n      benchmarks.forEach(benchmark => {\n        players.forEach(player => {\n          updates[\n            `${roundPath}.${player.name}.${benchmark}`\n          ] = getUpdatedPlayerBenchmarkScore({\n            average: round[player.name][benchmark],\n            nrRatings,\n            newRating: parseInt(player.benchmarks[benchmark], 10)\n          });\n        });\n      });\n\n      updates[`${roundPath}.stats.nrRatings`] = nrRatings + 1;\n      updates[`${roundPath}.stats.users`] = firestore.FieldValue.arrayUnion(\n        rootState.auth.authId\n      );\n\n      await db\n        .collection(\"contests\")\n        .doc(contestId)\n        .update(updates);\n\n      await dispatch(\"fetchContest\", contestId);\n    },\n\n    async endStage({ state, commit }, { contestId, stageId }) {\n      const stage = state.items[contestId].stages[stageId],\n        benchmarks = state.items[contestId].benchmarks;\n\n      let updates = {},\n        newPlayers = [],\n        score = null,\n        keys = null,\n        winner = null,\n        firstBenchmark,\n        secondBenchMark;\n\n      for (let [roundKey, round] of Object.entries(stage)) {\n        // Runda are un singur player, care trece automat in runda urmatoare\n        if (!round.stats) {\n          newPlayers.push(Object.keys(round)[0]);\n          continue;\n        }\n\n        // Un jucator a fost descalificat pana sa fie disponibila runda pentru votare\n        if (round.stats.winner) {\n          newPlayers.push(round.stats.winner);\n          continue;\n        }\n\n        score = {};\n\n        // Calcul scor pentru cei doi jucatori din runda\n        for (let [playerKey, player] of Object.entries(round)) {\n          if (playerKey == \"stats\") continue;\n\n          score[playerKey] = 0;\n          for (let [key, benchmark] of Object.entries(player)) {\n            if (key == \"score\") continue;\n            score[playerKey] += benchmark;\n          }\n\n          updates[`stages.${stageId}.${roundKey}.${playerKey}.score`] =\n            score[playerKey];\n        }\n\n        keys = Object.keys(score);\n\n        console.log(keys[0], score[keys[0]]);\n        console.log(keys[1], score[keys[1]]);\n\n        // Departajare prin scor\n        winner =\n          score[keys[0]] > score[keys[1]]\n            ? keys[0]\n            : score[keys[0]] < score[keys[1]]\n            ? keys[1]\n            : null;\n\n        console.log(\"winnner\", winner);\n\n        // Departajare prin benchmarks\n        if (!winner)\n          for (let [i, benchmark] of Object.entries(benchmarks)) {\n            firstBenchmark = round[keys[0]][benchmark];\n            secondBenchMark = round[keys[1]][benchmark];\n\n            winner =\n              firstBenchmark > secondBenchMark\n                ? keys[0]\n                : firstBenchmark < secondBenchMark\n                ? keys[1]\n                : null;\n\n            if (winner) break;\n          }\n\n        // Departajare finala prin nume sau castiga primul jucator\n        if (!winner)\n          if (keys[0].charAt(0) > keys[1].charAt(0)) {\n            winner = keys[1];\n          } else {\n            winner = keys[0];\n          }\n        console.log(\"winnner\", winner);\n\n        updates[`stages.${stageId}.${roundKey}.stats.winner`] = winner;\n        newPlayers.push(winner);\n      }\n\n      //Termina contestul daca a fost o singura runda in ultimul stage\n      if (Object.keys(stage).length == 1) {\n        commit(\"endContest\", contestId);\n        updates[\"status\"] = \"finished\";\n      } else {\n        const stage = newStageFactory(newPlayers, benchmarks);\n\n        const newStageId = state.items[contestId].currentStage + 1;\n        state.items[contestId].stages[`${newStageId}`] = stage;\n\n        updates = {\n          ...updates,\n          [`stages.${newStageId}`]: stage,\n          [\"currentStage\"]: newStageId,\n          [\"status\"]: \"paused\"\n        };\n      }\n\n      await db\n        .collection(\"contests\")\n        .doc(contestId)\n        .update(updates);\n    },\n\n    disqualifyPlayer(\n      { commit, state },\n      { playerName, opponentName, contestId, stageId, roundId }\n    ) {\n      let updates = {},\n        roundPath = `stages.${stageId}.${roundId}`;\n\n      // Daca in stage-ul curent, aceasta runda era singura\n      if (Object.keys(state.items[contestId].stages[stageId]).length == 1)\n        updates[\"status\"] = \"finished\";\n\n      updates[`${roundPath}.${playerName}.score`] = \"disqualified\";\n      updates[`${roundPath}.stats.winner`] = opponentName;\n\n      db.collection(\"contests\")\n        .doc(contestId)\n        .update(updates);\n\n      commit(\"disqualify\", {\n        playerName,\n        opponentName,\n        roundId,\n        stageId,\n        contestId\n      });\n    },\n\n    fetchContestRealTime({ state, commit }, contestId) {\n      db.collection(\"contests\")\n        .where(\"name\", \"==\", state.items[contestId].name)\n        .onSnapshot(function(snapshot) {\n          snapshot.docChanges().forEach(function(change) {\n            commit(\n              \"setItem\",\n              {\n                resource: \"contests\",\n                id: contestId,\n                item: change.doc.data()\n              },\n              { root: true }\n            );\n          });\n        });\n    }\n  },\n\n  mutations: {\n    endContest(state, contestId) {\n      state.items[contestId].status = \"finished\";\n    },\n\n    disqualify(\n      state,\n      { playerName, opponentName, contestId, stageId, roundId }\n    ) {\n      state.items[contestId].stages[stageId][roundId][playerName].score =\n        \"disqualified\";\n\n      state.items[contestId].stages[stageId][\n        roundId\n      ].stats.winner = opponentName;\n    }\n  }\n};\n"]}]}