{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/helpers/index.js","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/helpers/index.js","mtime":1573408857480},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js","mtime":1572617093804},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1573384218024}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar isEven = function isEven(number) {\n  return number % 2 == 0;\n};\n\nvar makeNewRound = function makeNewRound(firstPlayerName, secondPlayerName, benchmarks) {\n  var _round;\n\n  var round = (_round = {}, _defineProperty(_round, firstPlayerName, {\n    score: 0\n  }), _defineProperty(_round, secondPlayerName, {\n    score: 0\n  }), _defineProperty(_round, \"stats\", {\n    nrRatings: 0,\n    users: [],\n    winner: null\n  }), _round);\n  benchmarks.forEach(function (benchmark) {\n    round[firstPlayerName][benchmark] = null;\n    round[secondPlayerName][benchmark] = null;\n  });\n  return round;\n};\n\nvar newStageFactory = function newStageFactory(players, benchmarks) {\n  var nrStagePlayers = players.length,\n      stage = {};\n  var roundId = 0;\n\n  for (var i = 0; i < nrStagePlayers; i += 2) {\n    stage[roundId] = makeNewRound(players[i], players[i + 1], benchmarks);\n    roundId++;\n  }\n\n  return stage;\n};\n\nvar InitialStageFactory = function InitialStageFactory(players, benchmarks) {\n  var nrMaxStagePlayers = nextPowerOf2(players.length),\n      nrRounds = nrMaxStagePlayers / 2,\n      stage = {};\n  var firstSeed = 0,\n      lastSeed = nrMaxStagePlayers - 1,\n      firstRoundId = 0,\n      lastRoundId = nrRounds - 1,\n      roundId = null;\n\n  for (var i = 0; i < nrRounds; i++) {\n    roundId = isEven(i) ? firstRoundId++ : lastRoundId--; // Rundele 0 - n sunt configurate in ordinea 0, n, 1, n - 1, 2, n - 2, etc...\n\n    stage[roundId] = {};\n    stage[roundId] = players[lastSeed] ? makeNewRound(players[firstSeed], players[lastSeed], benchmarks) : _defineProperty({}, players[firstSeed], null); // Daca nu exista un jucator cu seedul 'lastSeed', primul jucator castiga runda automat\n\n    firstSeed++;\n    lastSeed--;\n  }\n\n  return stage;\n};\n\nvar nextPowerOf2 = function nextPowerOf2(n) {\n  var count = 0;\n  if (n && !(n & n - 1)) return n;\n\n  while (n != 0) {\n    n >>= 1;\n    count += 1;\n  }\n\n  return 1 << count;\n};\n\nvar getUpdatedPlayerBenchmarkScore = function getUpdatedPlayerBenchmarkScore(_ref2) {\n  var average = _ref2.average,\n      nrRatings = _ref2.nrRatings,\n      newRating = _ref2.newRating;\n  return (average * nrRatings + newRating) / (nrRatings + 1);\n};\n\nvar getWinnerBasedOnScore = function getWinnerBasedOnScore(score) {\n  keys = Object.keys(score);\n  score[keys[0]] > score[keys[1]] ? keys[0] : score[keys[0]] < score[keys[1]] ? keys[0] : null;\n};\n\nexport { newStageFactory, InitialStageFactory, getUpdatedPlayerBenchmarkScore };",{"version":3,"sources":["/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/helpers/index.js"],"names":["isEven","number","makeNewRound","firstPlayerName","secondPlayerName","benchmarks","round","score","nrRatings","users","winner","forEach","benchmark","newStageFactory","players","nrStagePlayers","length","stage","roundId","i","InitialStageFactory","nrMaxStagePlayers","nextPowerOf2","nrRounds","firstSeed","lastSeed","firstRoundId","lastRoundId","n","count","getUpdatedPlayerBenchmarkScore","average","newRating","getWinnerBasedOnScore","keys","Object"],"mappings":"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","sourcesContent":["const isEven = number => number % 2 == 0;\n\nconst makeNewRound = (firstPlayerName, secondPlayerName, benchmarks) => {\n  let round = {\n    [firstPlayerName]: { score: 0 },\n    [secondPlayerName]: { score: 0 },\n    stats: {\n      nrRatings: 0,\n      users: [],\n      winner: null\n    }\n  };\n\n  benchmarks.forEach(benchmark => {\n    round[firstPlayerName][benchmark] = null;\n    round[secondPlayerName][benchmark] = null;\n  });\n\n  return round;\n};\n\nconst newStageFactory = (players, benchmarks) => {\n  const nrStagePlayers = players.length,\n    stage = {};\n  let roundId = 0;\n\n  for (let i = 0; i < nrStagePlayers; i += 2) {\n    stage[roundId] = makeNewRound(players[i], players[i + 1], benchmarks);\n    roundId++;\n  }\n\n  return stage;\n};\n\nconst InitialStageFactory = (players, benchmarks) => {\n  const nrMaxStagePlayers = nextPowerOf2(players.length),\n    nrRounds = nrMaxStagePlayers / 2,\n    stage = {};\n\n  let firstSeed = 0,\n    lastSeed = nrMaxStagePlayers - 1,\n    firstRoundId = 0,\n    lastRoundId = nrRounds - 1,\n    roundId = null;\n\n  for (let i = 0; i < nrRounds; i++) {\n    roundId = isEven(i) ? firstRoundId++ : lastRoundId--; // Rundele 0 - n sunt configurate in ordinea 0, n, 1, n - 1, 2, n - 2, etc...\n    stage[roundId] = {};\n\n    stage[roundId] = players[lastSeed]\n      ? makeNewRound(players[firstSeed], players[lastSeed], benchmarks)\n      : { [players[firstSeed]]: null }; // Daca nu exista un jucator cu seedul 'lastSeed', primul jucator castiga runda automat\n\n    firstSeed++;\n    lastSeed--;\n  }\n\n  return stage;\n};\n\nconst nextPowerOf2 = n => {\n  let count = 0;\n\n  if (n && !(n & (n - 1))) return n;\n\n  while (n != 0) {\n    n >>= 1;\n    count += 1;\n  }\n\n  return 1 << count;\n};\n\nconst getUpdatedPlayerBenchmarkScore = ({ average, nrRatings, newRating }) => {\n  return (average * nrRatings + newRating) / (nrRatings + 1);\n};\n\nconst getWinnerBasedOnScore = score => {\n  keys = Object.keys(score);\n  score[keys[0]] > score[keys[1]]\n    ? keys[0]\n    : score[keys[0]] < score[keys[1]]\n    ? keys[0]\n    : null;\n};\n\nexport { newStageFactory, InitialStageFactory, getUpdatedPlayerBenchmarkScore };\n"]}]}