{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/ContestClassicVotingStage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/ContestClassicVotingStage.vue","mtime":1573408857478},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js","mtime":1573216109227}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapState, mapActions, mapMutations } from \"vuex\";\nimport ContestClassicVotingRound from \"@/components/ContestClassicVotingRound.vue\";\n\nexport default {\n  components: { ContestClassicVotingRound },\n\n  props: {\n    contestId: { required: true, type: String },\n    stageId: { required: true, type: Number }\n  },\n\n  computed: {\n    ...mapGetters({\n      user: \"auth/authUser\"\n    }),\n\n    ...mapState({\n      contestStatus(state) {\n        return state.contests.items[this.contestId].status;\n      },\n\n      stage(state) {\n        return state.contests.items[this.contestId].stages[this.stageId];\n      }\n    }),\n\n    isStarted() {\n      return this.contestStatus == \"started\";\n    },\n\n    isOrganizer() {\n      return this.user.role == \"organizer\";\n    },\n\n    filteredStage() {\n      let newStage = {};\n      let skip = null;\n\n      for (let [roundKey, round] of Object.entries(this.stage)) {\n        skip = false;\n        if (round.stats) {\n          for (let [playerKey, player] of Object.entries(round)) {\n            if (player.score == \"disqualified\") skip = true;\n          }\n          if (skip) continue;\n          newStage[roundKey] = round;\n        }\n      }\n\n      return newStage;\n    },\n\n    availableRoundsToVote() {\n      return Object.keys(this.filteredStage).length == 0;\n    }\n  },\n\n  methods: {\n    ...mapActions(\"contests\", [\"endStage\"]),\n\n    finishVotingRound() {\n      this.endStage({ contestId: this.contestId, stageId: this.stageId });\n    }\n  }\n};\n",{"version":3,"sources":["ContestClassicVotingStage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ContestClassicVotingStage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"row justify-content-center\">\n      <div class=\"col-lg-12\">\n        <div class=\"card bg-secondary shadow border-0\">\n          <div class=\"card-body px-lg-5 py-lg-5\">\n            <label\n              v-if=\"availableRoundsToVote\"\n              class=\"form-control-label\"\n              style=\"margin-right: 70px\"\n              >No available Rounds to Rate</label\n            >\n            <div v-if=\"!isOrganizer\">\n              <ContestClassicVotingRound\n                v-for=\"(round, roundId, roundIndex) in filteredStage\"\n                :key=\"roundIndex\"\n                :contestId=\"contestId\"\n                :stageId=\"stageId\"\n                :roundId=\"roundId\"\n              />\n            </div>\n            <div v-else-if=\"!availableRoundsToVote\">\n              <label class=\"form-control-label\">Judges are voting!</label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <button\n      v-if=\"isOrganizer && isStarted\"\n      style=\"margin: 0 2rem 0 2rem; \"\n      class=\"btn btn-primary my-4\"\n      @click=\"finishVotingRound()\"\n    >\n      Finish This Stage\n    </button>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapState, mapActions, mapMutations } from \"vuex\";\nimport ContestClassicVotingRound from \"@/components/ContestClassicVotingRound.vue\";\n\nexport default {\n  components: { ContestClassicVotingRound },\n\n  props: {\n    contestId: { required: true, type: String },\n    stageId: { required: true, type: Number }\n  },\n\n  computed: {\n    ...mapGetters({\n      user: \"auth/authUser\"\n    }),\n\n    ...mapState({\n      contestStatus(state) {\n        return state.contests.items[this.contestId].status;\n      },\n\n      stage(state) {\n        return state.contests.items[this.contestId].stages[this.stageId];\n      }\n    }),\n\n    isStarted() {\n      return this.contestStatus == \"started\";\n    },\n\n    isOrganizer() {\n      return this.user.role == \"organizer\";\n    },\n\n    filteredStage() {\n      let newStage = {};\n      let skip = null;\n\n      for (let [roundKey, round] of Object.entries(this.stage)) {\n        skip = false;\n        if (round.stats) {\n          for (let [playerKey, player] of Object.entries(round)) {\n            if (player.score == \"disqualified\") skip = true;\n          }\n          if (skip) continue;\n          newStage[roundKey] = round;\n        }\n      }\n\n      return newStage;\n    },\n\n    availableRoundsToVote() {\n      return Object.keys(this.filteredStage).length == 0;\n    }\n  },\n\n  methods: {\n    ...mapActions(\"contests\", [\"endStage\"]),\n\n    finishVotingRound() {\n      this.endStage({ contestId: this.contestId, stageId: this.stageId });\n    }\n  }\n};\n</script>\n\n<style scoped></style>\n"]}]}