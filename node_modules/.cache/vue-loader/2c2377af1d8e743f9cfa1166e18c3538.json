{"remainingRequest":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/ContestClassicVotingRound.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/src/components/ContestClassicVotingRound.vue","mtime":1573408857477},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/thread-loader/dist/cjs.js","mtime":1572617093804},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/babel-loader/lib/index.js","mtime":1572617092984},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/cache-loader/dist/cjs.js","mtime":1573384218503},{"path":"/Users/alexandruserban/Documents/Web Development/MPS/MPS-Voting-App/node_modules/vue-loader/lib/index.js","mtime":1573216109227}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters, mapState, mapActions, mapMutations } from \"vuex\";\n\nimport { db } from \"@/main\";\n\nexport default {\n  props: {\n    contestId: { required: true, type: String },\n    stageId: { required: true, type: Number },\n    roundId: { required: true, type: String }\n  },\n\n  data() {\n    return {\n      firstPlayer: {\n        name: null,\n        benchmarks: {}\n      },\n\n      secondPlayer: {\n        name: null,\n        benchmarks: {}\n      },\n\n      ratingsList: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    };\n  },\n\n  computed: {\n    ...mapState({\n      userId(state) {\n        return state.auth.authId;\n      },\n\n      benchmarks(state) {\n        return state.contests.items[this.contestId].benchmarks;\n      },\n\n      round(state) {\n        return state.contests.items[this.contestId].stages[this.stageId][\n          this.roundId\n        ];\n      },\n\n      userAlreadyVoted() {\n        return this.voters.includes(this.userId);\n      }\n    }),\n\n    voters() {\n      return this.round.stats.users;\n    }\n  },\n\n  methods: {\n    ...mapActions(\"contests\", [\"sendRoundRating\"]),\n\n    send() {\n      this.sendRoundRating({\n        contestId: this.contestId,\n        stageId: this.stageId,\n        roundId: this.roundId,\n        players: [this.firstPlayer, this.secondPlayer],\n        benchmarks: this.benchmarks\n      });\n    }\n  },\n\n  created() {\n    let updatedRound = { ...this.round };\n    delete updatedRound.stats;\n\n    let players = Object.keys(updatedRound);\n\n    if (\n      updatedRound[players[0]].score == \"disqualified\" &&\n      updatedRound[players[1]].score == \"disqualified\"\n    ) {\n      return;\n    }\n\n    if (updatedRound[players[0]] == null) {\n      this.firstPlayer.name = players[0];\n\n      this.secondPlayer.name = \"-\";\n    } else {\n      this.firstPlayer.name = players[0];\n\n      this.secondPlayer.name = players[1];\n    }\n\n    this.firstPlayer.benchmarks = updatedRound[players[0]];\n    this.secondPlayer.benchmarks = updatedRound[players[1]];\n  }\n};\n",{"version":3,"sources":["ContestClassicVotingRound.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","file":"ContestClassicVotingRound.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <button style=\"margin-left: .5rem\" class=\"btn btn-primary\">\n        {{ firstPlayer.name }}\n      </button>\n      <label class=\"form-control-label\">vs</label>\n      <button style=\"margin: 0 .5rem 0 .5rem; \" class=\"btn btn-primary my-4\">\n        {{ secondPlayer.name == null ? \"-\" : secondPlayer.name }}\n      </button>\n    </div>\n    <div v-if=\"!userAlreadyVoted\">\n      <label class=\"form-control-label\">Select Benchmarks Ratings</label>\n      <div\n        v-for=\"(benchmark, benchmarkKey, benchmarkIndex) in benchmarks\"\n        :key=\"benchmarkIndex\"\n      >\n        <select v-model=\"firstPlayer.benchmarks[benchmark]\">\n          <option disabled value>Score</option>\n          <option\n            v-for=\"(rating, ratingIndex) in ratingsList\"\n            :key=\"ratingIndex\"\n            >{{ rating }}</option\n          >\n        </select>\n\n        <button style=\"margin: 0 2rem 0 2rem; \" class=\"btn btn-primary my-4\">\n          {{ benchmark }}\n        </button>\n\n        <select v-model=\"secondPlayer.benchmarks[benchmark]\">\n          <option disabled value>Score</option>\n          <option\n            v-for=\"(rating, ratingIndex) in ratingsList\"\n            :key=\"ratingIndex\"\n            >{{ rating }}</option\n          >\n        </select>\n      </div>\n      <button @click=\"send()\" class=\"btn btn-primary my-4\">Send Ratings</button>\n    </div>\n    <div v-else>You already submited your vote for this round !</div>\n    <hr />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapState, mapActions, mapMutations } from \"vuex\";\n\nimport { db } from \"@/main\";\n\nexport default {\n  props: {\n    contestId: { required: true, type: String },\n    stageId: { required: true, type: Number },\n    roundId: { required: true, type: String }\n  },\n\n  data() {\n    return {\n      firstPlayer: {\n        name: null,\n        benchmarks: {}\n      },\n\n      secondPlayer: {\n        name: null,\n        benchmarks: {}\n      },\n\n      ratingsList: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    };\n  },\n\n  computed: {\n    ...mapState({\n      userId(state) {\n        return state.auth.authId;\n      },\n\n      benchmarks(state) {\n        return state.contests.items[this.contestId].benchmarks;\n      },\n\n      round(state) {\n        return state.contests.items[this.contestId].stages[this.stageId][\n          this.roundId\n        ];\n      },\n\n      userAlreadyVoted() {\n        return this.voters.includes(this.userId);\n      }\n    }),\n\n    voters() {\n      return this.round.stats.users;\n    }\n  },\n\n  methods: {\n    ...mapActions(\"contests\", [\"sendRoundRating\"]),\n\n    send() {\n      this.sendRoundRating({\n        contestId: this.contestId,\n        stageId: this.stageId,\n        roundId: this.roundId,\n        players: [this.firstPlayer, this.secondPlayer],\n        benchmarks: this.benchmarks\n      });\n    }\n  },\n\n  created() {\n    let updatedRound = { ...this.round };\n    delete updatedRound.stats;\n\n    let players = Object.keys(updatedRound);\n\n    if (\n      updatedRound[players[0]].score == \"disqualified\" &&\n      updatedRound[players[1]].score == \"disqualified\"\n    ) {\n      return;\n    }\n\n    if (updatedRound[players[0]] == null) {\n      this.firstPlayer.name = players[0];\n\n      this.secondPlayer.name = \"-\";\n    } else {\n      this.firstPlayer.name = players[0];\n\n      this.secondPlayer.name = players[1];\n    }\n\n    this.firstPlayer.benchmarks = updatedRound[players[0]];\n    this.secondPlayer.benchmarks = updatedRound[players[1]];\n  }\n};\n</script>\n\n<style scoped></style>\n"]}]}